# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none
pr: none

resources:
 repositories:
   - repository: microsoft-graph-docs
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/microsoft-graph-docs
     ref: master
   - repository: apidoctor
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/apidoctor
     ref: zengin/snippets
   - repository: microsoft-graph-explorer-api
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/microsoft-graph-explorer-api
     ref: dev
   - repository: MSGraph-SDK-Code-Generator
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/MSGraph-SDK-Code-Generator
     ref: master
   - repository: msgraph-sdk-dotnet
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/msgraph-sdk-dotnet
     ref: dev
   - repository: msgraph-metadata
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/msgraph-metadata

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  apidoctorPath: 'apidoctor'
  generatorPath: 'MSGraph-SDK-Code-Generator'
  typewriterSolution: '$(generatorPath)/**/Typewriter.sln'
  apidoctorSolution: '$(apidoctorPath)/**/*.sln'
  snippetLanguages: 'C#' #'C#,JavaScript,Objective-C,Java'
  metadataVersion: 'v1.0'
  metadataURL: 'https://raw.githubusercontent.com/microsoftgraph/msgraph-metadata/master/clean_v10_metadata/cleanMetadataWithDescriptionsv1.0.xml' #'https://graph.microsoft.com/stagingv1.0/$metadata'
  typewriterReleaseVersion: true

steps:
- checkout: microsoft-graph-docs
  clean: true
  fetchDepth: 1
  persistCredentials: true

- checkout: apidoctor
  clean: true
  fetchDepth: 1
  submodules: recursive
  persistCredentials: true

- checkout: microsoft-graph-explorer-api
  clean: true
  fetchDepth: 1
  persistCredentials: true
  
- checkout: msgraph-sdk-dotnet
  clean: true
  fetchDepth: 1
  persistCredentials: true

- checkout: msgraph-metadata
  condition: eq(variables['typewriterReleaseVersion'], true)
  clean: true
  fetchDepth: 1
  persistCredentials: true

- checkout: MSGraph-SDK-Code-Generator
  clean: true
  fetchDepth: 1
  submodules: recursive
  persistCredentials: true

- checkout: self
  clean: true
  fetchDepth: 1
  persistCredentials: true

- task: DotNetCoreCLI@2
  displayName: 'Build snippet generator'
  inputs:
    command: 'build'
    projects: 'microsoft-graph-explorer-api\CodeSnippetsReflection.App\CodeSnippetsReflection.App.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: NuGetToolInstaller@1
  displayName: 'Install Nuget.exe'

- task: NuGetCommand@2
  displayName: 'Restore packages for apidoctor'
  inputs:
    restoreSolution: '$(apidoctorSolution)'

- task: VSBuild@1
  displayName: 'Build apidoctor'
  inputs:
    solution: '$(apidoctorSolution)'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Set snippet generator and apidoctor paths'
  inputs:
    targetType: 'inline'
    script: |
      # release folder can change based on .NET core version, so search recursively in bin folder
      $snippetGeneratorPath = (Get-ChildItem $env:Build_SourcesDirectory\microsoft-graph-explorer-api\CodeSnippetsReflection.App\bin\Release *App.exe -Recurse).FullName
      Write-Host "Path to snippet generator tool: $snippetGeneratorPath"
      Write-Host "##vso[task.setvariable variable=snippetGeneratorPath]$snippetGeneratorPath"

      $apidoctorPath = (Get-ChildItem $env:Build_SourcesDirectory\apidoctor\ApiDoctor.Console\bin\Release apidoc.exe -Recurse).FullName
      Write-Host "Path to apidoctor tool: $apidoctorPath"
      Write-Host "##vso[task.setvariable variable=apidoctorPath]$apidoctorPath"

- task: PowerShell@2
  displayName: 'Run snippet generation'
  inputs:
    workingDirectory: microsoft-graph-docs
    targetType: 'inline'
    script: |
      $(apidoctorPath) generate-snippets --ignore-warnings --path . --snippet-generator-path $(snippetGeneratorPath) --lang $(snippetLanguages) --git-path "C:\Program Files\Git\bin\git.exe" --skip-publishing-changes

- task: PowerShell@2
  displayName: 'Calculate and set pipeline variables'
  inputs:
    targetType: inline
    # TODO support metadata path
    script: |
      $repoModelsDir = "$env:Build_SourcesDirectory\msgraph-sdk-dotnet\src\Microsoft.Graph\Generated\"
      Write-Host "Path to repo model directory: $repoModelsDir"
      Write-Host "##vso[task.setvariable variable=repoModelsDir]$repoModelsDir"

      $outputPath = Join-Path $env:Build_SourcesDirectory "output"
      Write-Host "Path to typewriter.exe output $outputPath"
      Write-Host "##vso[task.setvariable variable=outputPath]$outputPath"

- task: NuGetCommand@2
  displayName: 'Restore packages for Typewriter tool'
  inputs:
    restoreSolution: '$(typewriterSolution)'

- task: VSBuild@1
  displayName: 'Build Typewriter'
  inputs:
    solution: '$(typewriterSolution)'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Run Typewriter'
  inputs:
    targetType: 'inline'
    script: |
      $typewriterPath = (Join-Path (Join-Path $env:Build_SourcesDirectory\MSGraph-SDK-Code-Generator\src\Typewriter\bin\ $(buildConfiguration)) Typewriter.exe)
      Write-Host "Path to typewriter tool: $typewriterPath"
      Write-Host "##vso[task.setvariable variable=typewriterPath]$typewriterPath"

      & $typewriterPath -v Info -m $(metadataURL) -o $(outputPath) -g Files

- task: PowerShell@2
  displayName: 'Copy generated files into the repo'
  inputs:
    targetType: inline
    script: |
      Remove-Item -Recurse $env:repoModelsDir | Write-Host
      Write-Host "Removed the existing generated files in the repo." -ForegroundColor Green

      $modelsDirectory = Join-Path $env:outputPath "\com\microsoft\graph\"
      Move-Item $modelsDirectory $env:repoModelsDir
      Write-Host "Moved the models from $modelsDirectory into the local repo." -ForegroundColor Green

- task: DotNetCoreCLI@2
  displayName: 'Build Microsoft.Graph.dll'
  inputs:
    command: 'build'
    projects: msgraph-sdk-dotnet/**/*.csproj
    arguments: '--configuration $(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Get DLL path'
  inputs:
    targetType: inline
    workingDirectory: '$(Build.SourcesDirectory)'
    script: |
      $allGeneratedDlls = Get-ChildItem -Include Microsoft.Graph.dll -Recurse
      $dotNetCoreDll = $allGeneratedDlls | Where-Object { $_.FullName.Contains("netcoreapp") }
      $dllPath = $dotNetCoreDll.FullName
      Write-Host "Path to Microsoft.Graph.dll: $dllPath"
      Write-Host "##vso[task.setvariable variable=dllPath]$dllPath"

- task: PowerShell@2
  displayName: 'Transform .runsettings file'
  inputs:
    targetType: inline
    workingDirectory: '$(Build.SourcesDirectory)/msgraph-sdk-raptor'
    script: |
      $runSettingsFile = (Get-ChildItem -Include Test.runsettings -Recurse).FullName
      $runSettingsContent = Get-Content $runSettingsFile
      $updatedRunSettingsContent = $runSettingsContent.Replace("---VersionPlaceholder---", "$(metadataVersion)").Replace("---DllPathPlaceholder---", "$(dllPath)")
      $updatedRunSettingsContent > $runSettingsFile
      Write-Host "--- Test.runsettings file ---"
      Write-Host $updatedRunSettingsContent
      Write-Host "-----------------------------"
      Write-Host "Path to .runsettings file: $runSettingsFile"
      Write-Host "##vso[task.setvariable variable=runSettingsFile]$runSettingsFile"

- task: DotNetCoreCLI@2
  displayName: 'Csharp Compilation Tests'
  inputs:
    command: 'test'
    projects: '**/CSharpArbitraryDllTests.csproj'
    arguments: '--configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory) --settings $(runSettingsFile)'
    publishTestResults: false
  continueOnError: true