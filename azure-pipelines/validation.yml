# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none
pr: none

resources:
 repositories:
   - repository: MSGraph-SDK-Code-Generator
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/MSGraph-SDK-Code-Generator
     ref: master
   - repository: msgraph-beta-sdk-dotnet
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/msgraph-beta-sdk-dotnet
     ref: master
   - repository: msgraph-metadata
     type: github
     endpoint: microsoftgraph
     name: microsoftgraph/msgraph-metadata

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  typewriterSolution: 'MSGraph-SDK-Code-Generator/**/Typewriter.sln'
  apidoctorSolution: 'apidoctor/**/*.sln'
  snippetLanguages: 'C#' #'C#,JavaScript,Objective-C,Java'
  runSettingsFile: '$(Build.SourcesDirectory)/msgraph-sdk-raptor/CSharpArbitraryDllTests/Test.runsettings'

steps:
- checkout: msgraph-metadata
  displayName: checkout metadata
  fetchDepth: 1
  persistCredentials: true

- checkout: MSGraph-SDK-Code-Generator
  displayName: checkout generator
  fetchDepth: 1
  submodules: recursive
  persistCredentials: true

- checkout: msgraph-beta-sdk-dotnet
  displayName: checkout dotnet
  fetchDepth: 1
  persistCredentials: true

- task: NuGetToolInstaller@1
  displayName: 'Install Nuget.exe'

- task: NuGetCommand@2
  displayName: 'Restore packages for Typewriter tool'
  inputs:
    restoreSolution: '$(typewriterSolution)'

- task: VSBuild@1
  displayName: 'Build Typewriter'
  inputs:
    solution: '$(typewriterSolution)'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'

# TODO support metadata path
- task: PowerShell@2
  displayName: 'Transform metadata, run Typewriter and update models'
  inputs:
    targetType: 'inline'
    script: |
      $outputPath = Join-Path $env:Build_SourcesDirectory "output"
      Write-Host "Path to typewriter.exe output $outputPath"

      $typewriterPath = (Join-Path (Join-Path $env:Build_SourcesDirectory\MSGraph-SDK-Code-Generator\src\Typewriter\bin\ $(buildConfiguration)) Typewriter.exe)
      Write-Host "Path to typewriter tool: $typewriterPath"

      $metadataDir = "metadata"
      mkdir $metadataDir
      $metadataFile = Join-Path $metadataDir "metadata.xml"
      Invoke-WebRequest -Uri $(metadataURL) -OutFile $metadataFile
      Write-Host "Downloaded $(metadataURL) to $metadataFile" -ForegroundColor Green

      $xslTranformScriptPath = "$env:Build_SourcesDirectory\msgraph-metadata\transforms\csdl\transform.ps1"
      $xslPath = "msgraph-metadata\transforms\csdl\preprocess_csdl.xsl"
      $cleanMetadataFile = Join-Path $metadataDir "clean_metadata.xml"

      # transform script uses relative path to working directory
      & $xslTranformScriptPath -xslPath $xslPath -inputPath $metadataFile -outputPath $cleanMetadataFile
      Write-Host "Transformed $metadataFile to $cleanMetadataFile" -ForegroundColor Green

      Write-Host "Running Typewriter..."
      & $typewriterPath -v Info -m $cleanMetadataFile -o $outputPath -g Files

      $repoModelsDir = "$env:Build_SourcesDirectory\msgraph-sdk-beta-dotnet\src\Microsoft.Graph.Beta\Generated\"
      Write-Host "Path to repo model directory: $repoModelsDir"

      Remove-Item -Recurse $repoModelsDir | Write-Host
      Write-Host "Removed the existing generated files in the repo." -ForegroundColor Green

      $modelsDirectory = Join-Path $outputPath "\com\microsoft\graph\"
      Move-Item $modelsDirectory $repoModelsDir
      Write-Host "Moved the models from $modelsDirectory into the local repo." -ForegroundColor Green

- task: DotNetCoreCLI@2
  displayName: 'Build Microsoft.Graph.Beta.dll'
  inputs:
    command: 'build'
    projects: msgraph-beta-sdk-dotnet/**/*.csproj
    arguments: '--configuration $(buildConfiguration)'


- task: PowerShell@2
  displayName: 'Copy dll'
  inputs:
    targetType: inline
    workingDirectory: '$(Build.SourcesDirectory)'
    script: |
      $dllPath = (Get-ChildItem ./msgraph-beta-sdk-dotnet/ -Include Microsoft.Graph.dll -Recurse | Where-Object { $_.FullName.Contains("netcoreapp") }).FullName
      Write-Host "Path to Microsoft.Graph.Beta.dll: $dllPath"
      cp $dllPath $(Build.ArtifactStagingDirectory)\Microsoft.Graph.Beta.dll

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Microsoft.Graph.Beta.dll'
    ArtifactName: 'dll'
    publishLocation: 'Container'